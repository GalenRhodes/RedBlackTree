{
  "Structs/TreeIndex/Stride.html": {
    "name": "Stride",
    "parent_name": "TreeIndex"
  },
  "Structs/TreeIndex.html#/s:Sx8distance2to6StrideQzx_tF": {
    "name": "distance(to:)",
    "parent_name": "TreeIndex"
  },
  "Structs/TreeIndex.html#/s:Sx8advanced2byx6StrideQz_tF": {
    "name": "advanced(by:)",
    "parent_name": "TreeIndex"
  },
  "Structs/TreeIndex.html#/s:SL1loiySbx_xtFZ": {
    "name": "<(_:_:)",
    "parent_name": "TreeIndex"
  },
  "Structs/TreeIndex.html#/s:SQ2eeoiySbx_xtFZ": {
    "name": "==(_:_:)",
    "parent_name": "TreeIndex"
  },
  "Structs/TreeIndex.html#/s:SH4hash4intoys6HasherVz_tF": {
    "name": "hash(into:)",
    "parent_name": "TreeIndex"
  },
  "Structs/TreeIndex.html": {
    "name": "TreeIndex"
  },
  "Enums/ComparisonResults.html#/s:12RedBlackTree17ComparisonResultsO7EqualToyA2CmF": {
    "name": "EqualTo",
    "parent_name": "ComparisonResults"
  },
  "Enums/ComparisonResults.html#/s:12RedBlackTree17ComparisonResultsO8LessThanyA2CmF": {
    "name": "LessThan",
    "parent_name": "ComparisonResults"
  },
  "Enums/ComparisonResults.html#/s:12RedBlackTree17ComparisonResultsO11GreaterThanyA2CmF": {
    "name": "GreaterThan",
    "parent_name": "ComparisonResults"
  },
  "Enums/ComparisonResults.html": {
    "name": "ComparisonResults"
  },
  "Classes/BinaryTreeDictionary/Iterator.html#/s:12RedBlackTree06BinaryC10DictionaryC8IteratorV4nextx_q_tSgyF": {
    "name": "next()",
    "abstract": "<p>Advances to the next element and returns it, or nil if no next element exists.</p>",
    "parent_name": "Iterator"
  },
  "Classes/BinaryTreeDictionary/Values/Element.html": {
    "name": "Element",
    "parent_name": "Values"
  },
  "Classes/BinaryTreeDictionary/Values/Index.html": {
    "name": "Index",
    "parent_name": "Values"
  },
  "Classes/BinaryTreeDictionary/Values.html#/s:Sl10startIndex0B0Qzvp": {
    "name": "startIndex",
    "parent_name": "Values"
  },
  "Classes/BinaryTreeDictionary/Values.html#/s:Sl8endIndex0B0Qzvp": {
    "name": "endIndex",
    "parent_name": "Values"
  },
  "Classes/BinaryTreeDictionary/Values.html#/s:Sl5countSivp": {
    "name": "count",
    "parent_name": "Values"
  },
  "Classes/BinaryTreeDictionary/Values.html#/s:Sly7ElementQz5IndexQzcip": {
    "name": "subscript(_:)",
    "parent_name": "Values"
  },
  "Classes/BinaryTreeDictionary/Values.html#/s:SK5index6before5IndexQzAD_tF": {
    "name": "index(before:)",
    "parent_name": "Values"
  },
  "Classes/BinaryTreeDictionary/Values.html#/s:SK5index5after5IndexQzAD_tF": {
    "name": "index(after:)",
    "parent_name": "Values"
  },
  "Classes/BinaryTreeDictionary/Keys/Element.html": {
    "name": "Element",
    "parent_name": "Keys"
  },
  "Classes/BinaryTreeDictionary/Keys/Index.html": {
    "name": "Index",
    "parent_name": "Keys"
  },
  "Classes/BinaryTreeDictionary/Keys.html#/s:Sl10startIndex0B0Qzvp": {
    "name": "startIndex",
    "parent_name": "Keys"
  },
  "Classes/BinaryTreeDictionary/Keys.html#/s:Sl8endIndex0B0Qzvp": {
    "name": "endIndex",
    "parent_name": "Keys"
  },
  "Classes/BinaryTreeDictionary/Keys.html#/s:Sl5countSivp": {
    "name": "count",
    "parent_name": "Keys"
  },
  "Classes/BinaryTreeDictionary/Keys.html#/s:Sly7ElementQz5IndexQzcip": {
    "name": "subscript(_:)",
    "parent_name": "Keys"
  },
  "Classes/BinaryTreeDictionary/Keys.html#/s:SK5index6before5IndexQzAD_tF": {
    "name": "index(before:)",
    "parent_name": "Keys"
  },
  "Classes/BinaryTreeDictionary/Keys.html#/s:SK5index5after5IndexQzAD_tF": {
    "name": "index(after:)",
    "parent_name": "Keys"
  },
  "Classes/BinaryTreeDictionary/Element.html": {
    "name": "Element",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary/Index.html": {
    "name": "Index",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary.html#/s:12RedBlackTree06BinaryC10DictionaryCACyxq_Gycfc": {
    "name": "init()",
    "abstract": "<p>Create a new empty binary tree dictionary.</p>",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary.html#/s:12RedBlackTree06BinaryC10DictionaryC10trackOrderACyxq_GSb_tcfc": {
    "name": "init(trackOrder:)",
    "abstract": "<p>Create a new empty binary tree dictionary.</p>",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary.html#/s:12RedBlackTree06BinaryC10DictionaryC4fromACyxq_Gs7Decoder_p_tKcSeRzSeR_rlufc": {
    "name": "init(from:)",
    "abstract": "<p>Create a new binary tree dictionary with the data decoded from the decoder.</p>",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary.html#/s:12RedBlackTree06BinaryC10DictionaryC17dictionaryLiteralACyxq_Gx_q_td_tcfc": {
    "name": "init(dictionaryLiteral:)",
    "abstract": "<p>Create a new binary tree dictionary with the given elements provided as a dictionary literal.</p>",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary.html#/s:12RedBlackTree06BinaryC10DictionaryC10trackOrder_ACyxq_GSb_qd__tcSTRd__x_q_t7ElementRtd__lufc": {
    "name": "init(trackOrder:_:)",
    "abstract": "<p>Create a new binary tree dictionary from the given sequence of elements.</p>",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary.html#/s:12RedBlackTree06BinaryC10DictionaryCyACyxq_GADcfc": {
    "name": "init(_:)",
    "abstract": "<p>Create a new binary tree dictionary with the data from the provided binary tree dictionary.</p>",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary.html#/s:12RedBlackTree06BinaryC10DictionaryCyq_Sgxcip": {
    "name": "subscript(_:)",
    "abstract": "<p>Accesses the value associated with the given key for reading and writing.</p>",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary.html#/s:12RedBlackTree06BinaryC10DictionaryC_7defaultq_x_q_yXKtcip": {
    "name": "subscript(_:default:)",
    "abstract": "<p>Accesses the value with the given key. If the dictionary doesn’t contain the given key, accesses the",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary.html#/s:12RedBlackTree06BinaryC10DictionaryC11updateValue_6forKeyq_Sgq__xtF": {
    "name": "updateValue(_:forKey:)",
    "abstract": "<p>Updates the value stored in the dictionary for the given key, or adds a new key-value pair if the key does",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary.html#/s:12RedBlackTree06BinaryC10DictionaryC11removeValue6forKeyq_Sgx_tF": {
    "name": "removeValue(forKey:)",
    "abstract": "<p>Removes the given key and its associated value from the dictionary.</p>",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary.html#/s:12RedBlackTree06BinaryC10DictionaryC6remove2atx_q_tAA0C5IndexV_tF": {
    "name": "remove(at:)",
    "abstract": "<p>Removes and returns the key-value pair at the specified index.</p>",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary.html#/s:12RedBlackTree06BinaryC10DictionaryC9removeAll15keepingCapacityySb_tF": {
    "name": "removeAll(keepingCapacity:)",
    "abstract": "<p>Removes all key-value pairs from the dictionary.</p>",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary/Keys.html": {
    "name": "Keys",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary/Values.html": {
    "name": "Values",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary.html#/s:Sl10startIndex0B0Qzvp": {
    "name": "startIndex",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary.html#/s:Sl8endIndex0B0Qzvp": {
    "name": "endIndex",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary.html#/s:Sl5countSivp": {
    "name": "count",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary.html#/s:12RedBlackTree06BinaryC10DictionaryC5index6forKeyAA0C5IndexVSgx_tF": {
    "name": "index(forKey:)",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary.html#/s:SK5index5after5IndexQzAD_tF": {
    "name": "index(after:)",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary.html#/s:SK5index6before5IndexQzAD_tF": {
    "name": "index(before:)",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary.html#/s:12RedBlackTree06BinaryC10DictionaryCyx_q_tAA0C5IndexVcip": {
    "name": "subscript(_:)",
    "abstract": "<p>Accesses the key-value pair at the specified position.</p>",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary.html#/s:12RedBlackTree06BinaryC10DictionaryC32withContiguousStorageIfAvailableyqd__Sgqd__SRyx_q_tGKXEKlF": {
    "name": "withContiguousStorageIfAvailable(_:)",
    "abstract": "<p>Not available. Returns <code>nil</code>.</p>",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary.html#/s:12RedBlackTree06BinaryC10DictionaryC12makeIteratorAC0G0Vyxq__GyF": {
    "name": "makeIterator()",
    "abstract": "<p>Returns an iterator over the dictionary’s key-value pairs.</p>",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary/Iterator.html": {
    "name": "Iterator",
    "abstract": "<p>An iterator over the members of a Dictionary<Key, Value>.</p>",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary.html#/s:SQ2eeoiySbx_xtFZ": {
    "name": "==(_:_:)",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary.html#/s:SH4hash4intoys6HasherVz_tF": {
    "name": "hash(into:)",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary.html#/s:SE6encode2toys7Encoder_p_tKF": {
    "name": "encode(to:)",
    "parent_name": "BinaryTreeDictionary"
  },
  "Classes/BinaryTreeDictionary.html": {
    "name": "BinaryTreeDictionary"
  },
  "Classes.html": {
    "name": "Classes",
    "abstract": "<p>The following classes are available globally.</p>"
  },
  "Enums.html": {
    "name": "Enumerations",
    "abstract": "<p>The following enumerations are available globally.</p>"
  },
  "Structs.html": {
    "name": "Structures",
    "abstract": "<p>The following structures are available globally.</p>"
  }
}

{"Extensions/Dictionary.html#/s:SD12RedBlackTreeSLRzrlE14treeDictionaryAA0cE0Cyxq_GyFZ":{"name":"treeDictionary()","abstract":"<p>Create a new, empty binary tree dictionary.</p>","parent_name":"Dictionary"},"Extensions/Dictionary.html#/s:SD12RedBlackTreeSLRzrlE14treeDictionaryAbA0cE0Cyxq_GAE_tFZ":{"name":"treeDictionary(treeDictionary:)","abstract":"<p>Create a new binary tree dictionary with all the elements from this dictionary. It does not create a copy","parent_name":"Dictionary"},"Extensions/Dictionary.html#/s:SD12RedBlackTreeSLRzrlE14treeDictionary17dictionaryLiteralAA0cE0Cyxq_Gx_q_td_tFZ":{"name":"treeDictionary(dictionaryLiteral:)","abstract":"<p>Create a new binary tree dictionary with the elements given.</p>","parent_name":"Dictionary"},"Extensions/Dictionary.html#/s:SD12RedBlackTreeSLRzrlE14treeDictionary10dictionaryAA0cE0Cyxq_GSDyxq_G_tFZ":{"name":"treeDictionary(dictionary:)","abstract":"<p>Create a new binary tree dictionary with the elements from the given hashable dictionary.</p>","parent_name":"Dictionary"},"Extensions/Dictionary.html#/s:SD12RedBlackTreeSLRzrlE14treeDictionarySDyxq_GAA0cE0Cyxq_G_tcfc":{"name":"init(treeDictionary:)","abstract":"<p>Create a Swift Hashable Dictionary from a Binary Tree Dictionary.</p>","parent_name":"Dictionary"},"Extensions/Dictionary.html#/s:SD12RedBlackTreeSLRzrlE5merge_16uniquingKeysWithyAA0C10DictionaryCyxq_G_q_q__q_tKXEtKF":{"name":"merge(_:uniquingKeysWith:)","parent_name":"Dictionary"},"Extensions/Dictionary.html#/s:SD12RedBlackTreeSLRzrlE7merging_16uniquingKeysWithSDyxq_GAA0C10DictionaryCyxq_G_q_q__q_tKXEtKF":{"name":"merging(_:uniquingKeysWith:)","parent_name":"Dictionary"},"Extensions/Dictionary.html":{"name":"Dictionary"},"Classes/TreeNode.html#/s:12RedBlackTree0C4NodeC3keyxvp":{"name":"key","abstract":"<p>Key</p>","parent_name":"TreeNode"},"Classes/TreeNode.html#/s:12RedBlackTree0C4NodeC5valueq_vp":{"name":"value","abstract":"<p>Value</p>","parent_name":"TreeNode"},"Classes/TreeNode.html#/s:12RedBlackTree0C4NodeC3key5valueACyxq_Gx_q_tcfc":{"name":"init(key:value:)","abstract":"<p>Creates a new node with the given key, value, and color.</p>","parent_name":"TreeNode"},"Classes/TreeNode.html#/s:12RedBlackTree0C4NodeCyACyxq_GSgxcip":{"name":"subscript(_:)","abstract":"<p>Get the element associated with the given key.</p>","parent_name":"TreeNode"},"Classes/TreeNode.html#/s:12RedBlackTree0C4NodeC06insertD03key5valueACyxq_Gx_q_tF":{"name":"insertNode(key:value:)","abstract":"<p>Insert the given value associated with the given key into this tree branch.</p>","parent_name":"TreeNode"},"Classes/TreeNode.html#/s:12RedBlackTree0C4NodeC06removeD0ACyxq_GSgyF":{"name":"removeNode()","abstract":"<p>Remove this node.</p>","parent_name":"TreeNode"},"Classes/TreeNode.html#/s:12RedBlackTree0C4NodeC7forEach9backwards_ySb_yACyxq_GKXEtKF":{"name":"forEach(backwards:_:)","abstract":"<p>Iterate over this branch in-order.</p>","parent_name":"TreeNode"},"Classes/TreeNode.html#/s:12RedBlackTree0C4NodeC4node8forIndexACyxq_GSi_tF":{"name":"node(forIndex:)","abstract":"<p>Find the node with the given index. Causes a fatal error if the index is out-of-bounds.</p>","parent_name":"TreeNode"},"Classes/TreeNode.html#/s:12RedBlackTree0C4NodeC05firstD05whereACyxq_GSgSbAFKXE_tKF":{"name":"firstNode(where:)","abstract":"<p>Returns the first node for which the given predicate returns <code>true</code>.</p>","parent_name":"TreeNode"},"Classes/TreeNode.html#/s:12RedBlackTree0C4NodeC4datax3key_q_5valuetvp":{"name":"data","abstract":"<p>Convenience calculated field to convert the node into a tuple.</p>","parent_name":"TreeNode"},"Classes/TreeNode.html#/s:12RedBlackTree0C4NodeC02isA0Sbvp":{"name":"isRed","parent_name":"TreeNode"},"Classes/TreeNode.html#/s:12RedBlackTree0C4NodeC02isB0Sbvp":{"name":"isBlack","parent_name":"TreeNode"},"Classes/TreeNode.html#/s:12RedBlackTree0C4NodeC8previousACyxq_GSgvp":{"name":"previous","abstract":"<p>The node just before this node (in-order).</p>","parent_name":"TreeNode"},"Classes/TreeNode.html#/s:12RedBlackTree0C4NodeC4nextACyxq_GSgvp":{"name":"next","abstract":"<p>The node just after this node (in-order).</p>","parent_name":"TreeNode"},"Classes/TreeNode.html#/s:12RedBlackTree0C4NodeC5firstACyxq_Gvp":{"name":"first","parent_name":"TreeNode"},"Classes/TreeNode.html#/s:12RedBlackTree0C4NodeC4lastACyxq_Gvp":{"name":"last","parent_name":"TreeNode"},"Classes/TreeNode.html#/s:12RedBlackTree0C4NodeC06parentD0ACyxq_GSgvp":{"name":"parentNode","parent_name":"TreeNode"},"Classes/TreeNode.html#/s:12RedBlackTree0C4NodeC04leftD0ACyxq_GSgvp":{"name":"leftNode","parent_name":"TreeNode"},"Classes/TreeNode.html#/s:12RedBlackTree0C4NodeC05rightD0ACyxq_GSgvp":{"name":"rightNode","parent_name":"TreeNode"},"Classes/TreeNode.html#/s:s23CustomStringConvertibleP11descriptionSSvp":{"name":"description","parent_name":"TreeNode"},"Classes/TreeDictionary/Values/Index.html":{"name":"Index","parent_name":"Values"},"Classes/TreeDictionary/Values/Indices.html":{"name":"Indices","parent_name":"Values"},"Classes/TreeDictionary/Values/Element.html":{"name":"Element","parent_name":"Values"},"Classes/TreeDictionary/Values.html#/s:Sl10startIndex0B0Qzvp":{"name":"startIndex","parent_name":"Values"},"Classes/TreeDictionary/Values.html#/s:Sl8endIndex0B0Qzvp":{"name":"endIndex","parent_name":"Values"},"Classes/TreeDictionary/Values.html#/s:SK7indices7IndicesQzvp":{"name":"indices","parent_name":"Values"},"Classes/TreeDictionary/Values.html#/s:Sly7ElementQz5IndexQzcip":{"name":"subscript(_:)","parent_name":"Values"},"Classes/TreeDictionary/Values.html#/s:SK5index6before5IndexQzAD_tF":{"name":"index(before:)","parent_name":"Values"},"Classes/TreeDictionary/Values.html#/s:SK5index5after5IndexQzAD_tF":{"name":"index(after:)","parent_name":"Values"},"Classes/TreeDictionary/Keys/Index.html":{"name":"Index","parent_name":"Keys"},"Classes/TreeDictionary/Keys/Indices.html":{"name":"Indices","parent_name":"Keys"},"Classes/TreeDictionary/Keys/Element.html":{"name":"Element","parent_name":"Keys"},"Classes/TreeDictionary/Keys.html#/s:Sl10startIndex0B0Qzvp":{"name":"startIndex","parent_name":"Keys"},"Classes/TreeDictionary/Keys.html#/s:Sl8endIndex0B0Qzvp":{"name":"endIndex","parent_name":"Keys"},"Classes/TreeDictionary/Keys.html#/s:SK7indices7IndicesQzvp":{"name":"indices","parent_name":"Keys"},"Classes/TreeDictionary/Keys.html#/s:Sly7ElementQz5IndexQzcip":{"name":"subscript(_:)","parent_name":"Keys"},"Classes/TreeDictionary/Keys.html#/s:SK5index6before5IndexQzAD_tF":{"name":"index(before:)","parent_name":"Keys"},"Classes/TreeDictionary/Keys.html#/s:SK5index5after5IndexQzAD_tF":{"name":"index(after:)","parent_name":"Keys"},"Classes/TreeDictionary/Iterator.html#/s:St4next7ElementQzSgyF":{"name":"next()","parent_name":"Iterator"},"Classes/TreeDictionary/Index.html#/s:SL1loiySbx_xtFZ":{"name":"<(_:_:)","parent_name":"Index"},"Classes/TreeDictionary/Index.html#/s:SQ2eeoiySbx_xtFZ":{"name":"==(_:_:)","parent_name":"Index"},"Classes/TreeDictionary/Index.html#/s:SH4hash4intoys6HasherVz_tF":{"name":"hash(into:)","parent_name":"Index"},"Classes/TreeDictionary/Element.html":{"name":"Element","parent_name":"TreeDictionary"},"Classes/TreeDictionary/Indices.html":{"name":"Indices","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC8capacitySivp":{"name":"capacity","abstract":"<p>Exists to provide compatability with","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC10startIndexAC0F0Vyxq__Gvp":{"name":"startIndex","abstract":"<p>The position of the first element in a nonempty collection.</p>","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC8endIndexAC0F0Vyxq__Gvp":{"name":"endIndex","abstract":"<p>The collection’s “past the end” position—that is, the position one greater than the last valid subscript","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC7isEmptySbvp":{"name":"isEmpty","abstract":"<p>A Boolean value that indicates whether the dictionary is empty.</p>","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC5countSivp":{"name":"count","abstract":"<p>The number of key-value pairs in the dictionary.</p>","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC5firstx3key_q_5valuetSgvp":{"name":"first","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC4lastx3key_q_5valuetSgvp":{"name":"last","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC4keysAC4KeysVyxq__Gvp":{"name":"keys","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC6valuesAC6ValuesVyxq__Gvp":{"name":"values","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryCACyxq_Gycfc":{"name":"init()","abstract":"<p>Create a new, empty binary tree dictionary.</p>","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:Se4fromxs7Decoder_p_tKcfc":{"name":"init(from:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC04treeD0ACyxq_GAE_tcfc":{"name":"init(treeDictionary:)","abstract":"<p>Create a new binary tree dictionary with all the elements from this dictionary. It does not create a copy","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC10dictionaryACyxq_GSDyxq_G_tcSHRzrlufc":{"name":"init(dictionary:)","abstract":"<p>Create a new binary tree dictionary with the elements from the given hashable dictionary.</p>","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC17dictionaryLiteralACyxq_Gx_q_td_tcfc":{"name":"init(dictionaryLiteral:)","abstract":"<p>Create a new binary tree dictionary with the elements given.</p>","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC8elementsACyxq_GSayx_q_tG_tcfc":{"name":"init(elements:)","abstract":"<p>Create a new binary tree dictionary with the elements given.</p>","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryCyx3key_q_5valuetAC5IndexVyxq__Gcip":{"name":"subscript(_:)","abstract":"<p>Accesses the key-value pair at the specified position.</p>","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryCyq_Sgxcip":{"name":"subscript(_:)","abstract":"<p>Accesses the value associated with the given key for reading and writing.</p>","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC_7defaultq_x_q_yXKtcip":{"name":"subscript(_:default:)","abstract":"<p>Accesses the value with the given key, falling back to the given default value if the key isn’t found.</p>","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC7forEachyyyx3key_q_5valuet_tKXEKF":{"name":"forEach(_:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary/Index.html":{"name":"Index","abstract":"<p>The position of a key-value pair in a dictionary.</p>","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:SK8distance4from2toSi5IndexQz_AEtF":{"name":"distance(from:to:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:SK5index5after5IndexQzAD_tF":{"name":"index(after:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:SK5index6before5IndexQzAD_tF":{"name":"index(before:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:SK5index_8offsetBy5IndexQzAD_SitF":{"name":"index(_:offsetBy:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:SK5index_8offsetBy07limitedC05IndexQzSgAE_SiAEtF":{"name":"index(_:offsetBy:limitedBy:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC5index6forKeyAC5IndexVyxq__GSgx_tF":{"name":"index(forKey:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary/Iterator.html":{"name":"Iterator","abstract":"<p>I&rsquo;m really blown away on the complete lack of information on how this class should act if the underlying","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:ST12makeIterator0B0QzyF":{"name":"makeIterator()","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC15reserveCapacityyySiF":{"name":"reserveCapacity(_:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC11removeValue6forKeyq_Sgx_tF":{"name":"removeValue(forKey:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC9removeAll15keepingCapacityySb_tF":{"name":"removeAll(keepingCapacity:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC6remove2atx3key_q_5valuetAC5IndexVyxq__G_tF":{"name":"remove(at:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC11updateValue_6forKeyq_Sgq__xtF":{"name":"updateValue(_:forKey:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary/Keys.html":{"name":"Keys","parent_name":"TreeDictionary"},"Classes/TreeDictionary/Values.html":{"name":"Values","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC13randomElement5usingx3key_q_5valuetSgqd__z_tSGRd__lF":{"name":"randomElement(using:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC13randomElementx3key_q_5valuetSgyF":{"name":"randomElement()","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC5merge_16uniquingKeysWithySDyxq_G_q_q__q_tKXEtKSHRzrlF":{"name":"merge(_:uniquingKeysWith:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC5merge_16uniquingKeysWithyqd___q_q__q_tKXEtKSTRd__x_q_t7ElementRtd__lF":{"name":"merge(_:uniquingKeysWith:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC5merge_16uniquingKeysWithyACyxq_G_q_q__q_tKXEtKF":{"name":"merge(_:uniquingKeysWith:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC7merging_16uniquingKeysWithACyxq_GSDyxq_G_q_q__q_tKXEtKSHRzrlF":{"name":"merging(_:uniquingKeysWith:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC7merging_16uniquingKeysWithACyxq_Gqd___q_q__q_tKXEtKSTRd__x_q_t7ElementRtd__lF":{"name":"merging(_:uniquingKeysWith:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC6filteryACyxq_GSbx3key_q_5valuet_tKXEKF":{"name":"filter(_:)","abstract":"<p>Returns a new tree dictionary containing the key-value pairs of this tree dictionary that satisfy the","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC8contains5whereS2bx3key_q_5valuet_tKXE_tKF":{"name":"contains(where:)","abstract":"<p>Returns a Boolean value indicating whether the sequence contains an element that satisfies the given","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC10allSatisfyyS2bx3key_q_5valuet_tKXEKF":{"name":"allSatisfy(_:)","abstract":"<p>Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate.</p>","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC5first5wherex3key_q_5valuetSgSbxAF_q_AGt_tKXE_tKF":{"name":"first(where:)","abstract":"<p>Returns the first element of the sequence that satisfies the given predicate.</p>","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC10firstIndex5whereAC0F0Vyxq__GSgSbx3key_q_5valuet_tKXE_tKF":{"name":"firstIndex(where:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC3min2byx3key_q_5valuetSgSbxAF_q_AGt_xAF_q_AGttKXE_tKF":{"name":"min(by:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC3max2byx3key_q_5valuetSgSbxAF_q_AGt_xAF_q_AGttKXE_tKF":{"name":"max(by:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC9mapValuesySDyxqd__Gqd__q_KXEKSHRzlF":{"name":"mapValues(_:)","abstract":"<p>Returns a new dictionary containing the keys of this dictionary with the values transformed by the given","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC3mapySayqd__Gqd__x3key_q_5valuet_tKXEKlF":{"name":"map(_:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC6reduceyqd__qd___qd__qd___x3key_q_5valuettKXEtKlF":{"name":"reduce(_:_:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC6reduce4into_qd__qd___yqd__z_x3key_q_5valuettKXEtKlF":{"name":"reduce(into:_:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC10compactMapySayqd__Gqd__Sgx3key_q_5valuet_tKXEKlF":{"name":"compactMap(_:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC16compactMapValuesyACyxqd__Gqd__Sgq_KXEKlF":{"name":"compactMapValues(_:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC16compactMapValuesySDyxqd__Gqd__Sgq_KXEKSHRzlF":{"name":"compactMapValues(_:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC6sorted2bySayx3key_q_5valuetGSbxAF_q_AGt_xAF_q_AGttKXE_tKF":{"name":"sorted(by:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC8shuffledSayx3key_q_5valuetGyF":{"name":"shuffled()","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC8shuffled5usingSayx3key_q_5valuetGqd__z_tSGRd__lF":{"name":"shuffled(using:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC19underestimatedCountSivp":{"name":"underestimatedCount","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC32withContiguousStorageIfAvailableyqd__Sgqd__SRyx3key_q_5valuetGKXEKlF":{"name":"withContiguousStorageIfAvailable(_:)","abstract":"<p>Tree dictionaries are not suitable for this method as the nodes are not stored in contiguous memory. As","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC11descriptionSSvp":{"name":"description","abstract":"<p>A string that represents the contents of the dictionary.</p>","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryC16debugDescriptionSSvp":{"name":"debugDescription","abstract":"<p>A string that represents the contents of the dictionary, suitable for debugging.</p>","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:SQ2eeoiySbx_xtFZ":{"name":"==(_:_:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:12RedBlackTree0C10DictionaryCAASHRzSHR_rlE4hash4intoys6HasherVz_tF":{"name":"hash(into:)","abstract":"<p>Hashes the essential components of this value by feeding them into the given hasher.Hashes the essential","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html#/s:SE6encode2toys7Encoder_p_tKF":{"name":"encode(to:)","parent_name":"TreeDictionary"},"Classes/TreeDictionary.html":{"name":"TreeDictionary"},"Classes/TreeNode.html":{"name":"TreeNode"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"}}